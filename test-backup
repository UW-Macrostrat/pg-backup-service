#!/usr/bin/env bash

# A test suite for database backup scripts
# TODO: we might want to rewrite this in python for clarity and added features.
# But the current shell version is fine for now.

export COMPOSE_FILE="docker-compose.test.yaml"

source bin/defs.bash

cleanup=1
if [ ${1:-""} == "--no-cleanup" ]; then
  cleanup=0
  shift
fi


run-test() {
  echo ""
  echo -e "\033[1mTesting $1\033[0m"
}

cleanup() {
  # Clean up resources used in testing
  returncode=$?
  echo ""
  if (( $cleanup )); then
    echo "Cleaning up resources..."
    docker compose down
    docker compose rm -f --volumes
  fi
  if (( $returncode )); then
    echo "Tests failed!"
  else
    echo "Tests passed!"
  fi

  exit $returncode
}

trap "cleanup" EXIT

export S3_BACKUP_BUCKET="test-bucket"
export DB_BACKUP_PREFIX="test-backup"
export DB_NAME="test_database"
export PGPORT=5432

docker compose up --build --remove-orphans --force-recreate -d

while ! docker compose exec db_server pg_isready ; do
  echo "Waiting for PostgreSQL server to be ready..."
  sleep 1
done

docker compose exec db_server createdb $DB_NAME

docker compose exec db_server psql $DB_NAME -c \
"CREATE TABLE test_table (id serial PRIMARY KEY, name text); \
INSERT INTO test_table (name) VALUES ('test');"

echo "Created test database"

run-test "basic backup"

docker compose run db_backup backup-db

prefix="$DB_BACKUP_PREFIX/$DB_NAME"
# Independently verify that the file is in the backend
file_list=$(docker compose exec --workdir /data/$S3_BACKUP_BUCKET storage find . -type f -path ./$prefix-*.pg-dump)

echo $file_list

# Test that a backup file was created
if [ -z "$file_list" ]; then
  echo "No matching files found in S3 bucket."
  exit 1
fi

echo "Backup file saved successfully!"

run-test "correct number of backups"

n_files=$(echo $file_list | wc -l)
if (( $n_files != 1 )); then
  echo "Expected 1 file, found $n_files"
  exit 1
fi

run-test "correct prefix"

if [[ ! $file_list == "./$prefix-"* ]]; then
  echo "Backup file name does not match expected format."
  exit 1
fi

run-test "create another backup"

docker compose run db_backup backup-db

run-test "list files using client API"

file_list=$(docker compose run db_backup bash /usr/local/bin/run-rclone lsjson remote:$S3_BACKUP_BUCKET/$DB_BACKUP_PREFIX | jq -r '.[] | .Name')

n_files=$(echo $file_list | wc -w)
echo $n_files
if (( $n_files != 2 )); then
  echo "Expected 2 file, found $n_files"
  exit 1
fi



